<?php

/**
 * ProcessWire Page Field Select Creator
 * by Adrian Jones
 *
 * Allows automated creation of Page fields, along with the templates and page tree for their source.
 *
 * ProcessWire 2.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class ProcessPageFieldSelectCreator extends Process implements Module {

    /**
     * getModuleInfo is a module required by all modules to tell ProcessWire about them
     *
     * @return array
     *
     */
    public static function getModuleInfo() {
        return array(
            'title' => 'Page Field Select Creator',
            'version' => 1,
            'summary' => 'Automated creation of Page fields, along with the templates and page tree for their source.',
            'singular' => true,
            'autoload' => false,
            );
    }

    /**
     * Name used for the page created in the admin
     *
     */
    const adminPageName = 'page-field-select-creator';


    /**
     * Instance of Page, representing the parent Page for imported pages
     *
     */
    protected $parent = null;



    /**
     * Initialize the module
     *
     */
    public function init() {
        parent::init();
    }

    /**
     * Executed when root url for module is accessed
     *
     */
    public function ___execute() {

        $form = $this->buildForm1();
        if($this->input->post->submit) {
            return $this->processForm1($form);
        }
        else{
            return $form->render();
        }

    }


    /**
     * Build the form
     *
     */
    protected function buildForm1() {

        $defaultInputfieldClasses = array(
            // default options
            'InputfieldSelect',
            'InputfieldSelectMultiple*',
            'InputfieldCheckboxes*',
            'InputfieldRadios',
            'InputfieldAsmSelect*',
            'InputfieldPageListSelect',
        );

        $form = $this->modules->get("InputfieldForm");
        $form->method = 'post';
        $form->description = "Settings";

        $f = $this->modules->get("InputfieldText");
        $f->name = 'fieldTitle';
        $f->label = 'Field Title';
        $f->required = true;
        $f->description = "The title of the page field to be created.";
        $f->notes = "Use capitals, spaces etc.";
        $form->add($f);

        $f = $this->modules->get("InputfieldPageListSelect");
        $f->name = 'treeParent';
        $f->label = 'Parent Page';
        $f->required = true;
        $f->description = 'The parent where you want the parent of the selectable pages created. For example you may want to choose a hidden "Categories" parent page.';
        if($this->session->treeParent) $f->attr('value', $this->session->treeParent);
        $form->add($f);

        $f = $this->modules->get("InputfieldRadios");
        $f->name = 'derefAsPage';
        $f->label = 'Deference in API as';
        $f->description = 'If your field will contain multiple pages, then you should select the first option (PageArray). If your field only needs to contain a single page, then select one of the single Page options (if you are not sure which, select the last option).';
        $f->required = true;
        $f->addOption('0', 'Multiple pages (PageArray)');
        $f->addOption('1', 'Single page (Page) or boolean false when none selected');
        $f->addOption('2', 'Single page (Page) or empty page (NullPage) when none selected');
        $this->session->derefAsPage ? $f->attr('value', $this->session->derefAsPage) : $f->attr('value', 0);
        $form->add($f);

        $f = $this->modules->get("InputfieldTextarea");
        $f->name = 'selectOptions';
        $f->label = 'Select Options';
        $f->description = 'These will become the child pages that will populate the page field select options.';
        $f->notes = "SIMPLE\nEnter one option per line - title field only, eg: \nSingle\nDouble\nSuite\n\nADVANCED\nYou may alternately set up options with multiple fields, eg:\nTitle, Number of People, Number of Beds, Kitchen Facilities\nSingle, 1, 1, Fridge Only\nDouble, 2, 2, Fridge Only\nSuite, 3, 6, Full Kitchen\n\nIn this case, the first line is used for the field names and the first field must be \"Title\"";
        $f->required = true;
        $form->add($f);

        $f = $this->modules->get("InputfieldSelect");
        $f->name = 'inputfield';
        $f->label = 'Input field type';
        $f->description = 'The type of field that will be used to select a page. Select one that is consistent with the single page vs. multi-page needs you chose in the "details" tab of this field.';
        $f->notes = '* Types indicated with an asterisk are for multiple page selection.';
        $f->required = true;
        foreach($defaultInputfieldClasses as $option){
            $f->addOption(str_replace('*','',$option), str_replace('Inputfield','',$option));
        }
        if($this->session->inputfield) $f->attr('value', $this->session->inputfield);
        $form->add($f);

        $f = $this->modules->get("InputfieldCheckbox");
        $f->name = 'addable';
        $f->label = 'Allow new pages to be created from field?';
        $f->description = 'If checked, an option to add new page(s) will also be present if the indicated requirements are met.';
        $f->notes = 'The editing user must have access to create/publish these pages. All other normal requirements for this feature are taken care of.';
        $f->attr('checked', $this->session->addable == '1' ? 'checked' : '' );
        if($this->session->addable) $f->attr('value', $this->session->addable);
        $form->add($f);



        $this->addSubmit($form, 'Create field, templates, and pages');

        return $form;
    }

    /**
     * Process the form and populate session variables with the results
     *
     */
    protected function processForm1(InputfieldForm $form) {

        $form->processInput($this->input->post);
        if(count($form->getErrors())) return false;

        $this->session->treeParent = (int) $this->input->treeParent;
        $this->session->derefAsPage = (int) $this->input->derefAsPage;
        $this->session->inputfield = $this->input->inputfield;
        $this->session->addable = (int) $this->input->addable;


        $fieldTitle = $form->get('fieldTitle')->value;
        $fieldName = $this->sanitizer->fieldName(strtolower($fieldTitle));


        //Templates - first iteration to create fieldgroups and templates
        //Parent template
        if(!$this->fieldgroups->$fieldName) {
            $fg = new Fieldgroup();
            $fg->name = $fieldName;
            $fg->add("title");
            $fg->save();
        }
        else{
            $fg = $this->fieldgroups->$fieldName;
        }


        if(!$this->templates->$fieldName) {
            $parent_template = new Template();
            $parent_template->name = $fieldName;
            $parent_template->label = $fieldTitle;
            $parent_template->fieldgroup = $fg;
            $parent_template->save();
        }
        else{
            $parent_template = $this->templates->$fieldName;
        }


        //Child template
        if(!$this->fieldgroups->{$fieldName.'_items'}) {
            $fg = new Fieldgroup();
            $fg->name = $fieldName.'_items';
            $fg->add("title");
            $fg->save();
        }
        else{
            $fg = $this->fieldgroups->$fieldName.'_items';
        }

        if(!$this->templates->{$fieldName.'_items'}) {
            $child_template = new Template();
            $child_template->name = $fieldName.'_items';
            $child_template->label = $fieldTitle.' Items';
            $child_template->fieldgroup = $fg;
            $child_template->save();
        }
        else{
            $child_template = $this->templates->$fieldName.'_items';
        }


        //Templates - second iteration to save settings.

        //Parent Template
        $parent_template->noParents = 1;
        $parent_template->childTemplates = array($child_template->id);
        $parent_template->save();

        //Child template
        $child_template->noChildren = 1;
        $child_template->parentTemplates = array($parent_template->id);
        $child_template->save();



        //Pages
        //Parent
        if(!$this->pages->$fieldName){

            $parent = $this->pages->get($form->get('treeParent')->value);

            $page = new Page();
            $page->parent = $parent;
            $page->template = $parent_template;
            $page->name = $fieldName;
            $page->title = $fieldTitle;
            $page->of;
            $page->save();

        }

        //Child pages - ie select options
        $i=0;
        foreach(explode("\n",$form->get('selectOptions')->value) as $selectTitle){

            if(strpos($selectTitle,',') !== false){ // Creation of child pages using the ADVANCED configuration options - comma should be a good enough indicator to check for

                $x=0;
                foreach(explode(",",$selectTitle) as $selectFieldTitle){

                    $selectFieldTitle = trim($selectFieldTitle);
                    $selectFieldName = $this->sanitizer->fieldName(strtolower($selectFieldTitle));

                    if($i==0){ //First loop/line is for field creation. Remaining are for child pages

                        if($selectFieldName != 'title') { //No need to create title field

                            $sub_field[$x] = $selectFieldName; // Store name of fields for later population of values in child page

                            if(!$this->fields->$selectFieldName){
                                $field = new Field();
                                $field->type = $this->modules->get('FieldtypeText'); // get a field type
                                $field->name = $selectFieldName;
                                $field->label = $selectFieldTitle;
                                $field->save(); // save the field

                                $child_template->fieldgroup->append($field); // add new field to template
                            }
                            else{
                                $child_template->fieldgroup->append($this->fields->$selectFieldName); // add existing field to template - NB: this does not change any of the attributes of a field if it already exists - this could be problematic
                            }

                            $child_template->fieldgroup->save();
                        }

                    }
                    else{ // All but first loop - for creating child pages from the rest of the lines in the select options textarea

                        if($x==0){ // First value in comma separated row is the title, so create the child page with this
                            $child_page = new Page();
                            $child_page->parent = $page;
                            $child_page->template = $child_template;
                            $child_page->name = $selectFieldName;
                            $child_page->title = $selectFieldTitle;
                            $child_page->of;
                            $child_page->save();
                        }
                        else{ // Add values for the other fields to the child page
                            $child_page->$sub_field[$x] = $selectFieldTitle;
                            $child_page->save();
                        }

                    }

                    $x++;
                }
            }
            else{ // Creation of child pages using the SIMPLE configuration option
                $child_page = new Page();
                $child_page->parent = $page;
                $child_page->template = $child_template;
                $child_page->name = $this->sanitizer->fieldName(strtolower($selectTitle));
                $child_page->title = $selectTitle;
                $child_page->of;
                $child_page->save();
            }

            $i++;
        }



        //Page Field
        if(!$this->fields->$fieldName){
            $field = new Field();
            $field->type = $this->modules->get('FieldtypePage'); // get a field type
            $field->name = $fieldName;
            $field->label = $fieldTitle;
            $field->description = 'Page field that selects child pages from the parent entitled ' . $fieldTitle;
            $field->derefAsPage = $form->get('derefAsPage')->value;
            $field->inputfield = $form->get('inputfield')->value;
            $field->labelFieldName = 'title';
            $field->addable = $form->get('addable')->value;
            $field->save(); // save the field
        }



        return $this->processFormMarkup($field, $parent_template, $child_template, $page);


    }




    /**
     * Provide the completion output markup for processImportForm1
     *
     */
    protected function processFormMarkup($field, $parent_template, $child_template, $page) {
        $out = '';
        $out .= "<h2>Created all required templates and pages for the $field->label field</h2>" .
            "<p><a href='{$this->config->urls->admin}setup/field/edit?id={$field->id}'>View the created page field</a></p>
            <p><a href='{$this->config->urls->admin}setup/template/edit?id={$parent_template->id}'>View the parent template</a></p>
            <p><a href='{$this->config->urls->admin}setup/template/edit?id={$child_template->id}'>View the child template</a></p>
            <p><a href='{$this->config->urls->admin}page/list/?open={$page->id}'>Open the page tree</a></p>
            <p><a href='./'>Create another page field</a></p>";

        return $out;
    }



    /**
     * Add a submit button, moved to a function so we don't have to do this several times
     *
     */
    protected function addSubmit(InputfieldForm $form, $value = 'Submit') {
        $f = $this->modules->get("InputfieldSubmit");
        $f->name = 'submit';
        $f->value = $value;
        $form->add($f);
    }



    /**
     * Install the module and create the page where it lives
     *
     */
    public function ___install() {

        if(ProcessWire::versionMajor == 2 && ProcessWire::versionMinor < 1) {
            throw new WireException("This module requires ProcessWire 2.1 or newer");
        }

        $page = $this->getInstalledPage();
        $this->message("Installed to {$page->path}");
        if($page->parent->name == 'setup') $this->message("Click to your 'Setup' page to start using the Page Field Select Creator");
    }

    /**
     * Return the page that this Process is installed on
     *
     */
    protected function getInstalledPage() {

        $admin = $this->pages->get($this->config->adminRootPageID);
        $parent = $admin->child("name=setup");
        if(!$parent->id) $parent = $admin;
        $page = $parent->child("name=" . self::adminPageName);

        if(!$page->id) {
            $page = new Page();
            $page->parent = $parent;
            $page->template = $this->templates->get('admin');
            $page->name = self::adminPageName;
            $page->title = "Page Field Select Creator";
            $page->process = $this;
            $page->sort = $parent->numChildren;
            $page->save();
        }

        return $page;
    }

    /**
     * Uninstall the module
     *
     */
    public function ___uninstall() {
        $page = $this->getInstalledPage();
        if($page->id) {
            $this->message("Removed {$page->path}");
            $this->pages->delete($page);
        }
    }

}
